import os
import logging
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, List

from config.settings import settings


class EmailNotifier:
    """Handles email notifications via Mac's Mail app using AppleScript"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def send_bill_notification(self, bill_info: Dict, pdf_path: str, venmo_info: Dict) -> bool:
        """Send bill notification email with PDF attachment
        
        Args:
            bill_info: Bill information from database
            pdf_path: Path to generated PDF
            venmo_info: Venmo request information
            
        Returns:
            True if email sent successfully (or simulated in test mode)
        """
        try:
            # Create email subject
            bill_month = datetime.strptime(bill_info['due_date'], '%m/%d/%Y').strftime('%B %Y')
            subject = f"PG&E Bill Split - {bill_month} (${float(bill_info['roommate_portion']):.2f})"
            
            # Create email body
            body = self._create_email_body(bill_info, venmo_info)
            
            # Send email
            if settings.TEST_MODE:
                return self._simulate_email_send(subject, body, pdf_path)
            else:
                return self._send_via_mail_app(
                    to_email=settings.ROOMMATE_EMAIL,
                    subject=subject,
                    body=body,
                    pdf_path=pdf_path,
                    from_account=settings.MY_EMAIL
                )
                
        except Exception as e:
            self.logger.error(f"Failed to send bill notification: {e}")
            return False
    
    def _create_email_body(self, bill_info: Dict, venmo_info: Dict) -> str:
        """Create email body content"""
        roommate_portion = float(bill_info['roommate_portion'])
        total_amount = float(bill_info['bill_amount'])
        bill_month = datetime.strptime(bill_info['due_date'], '%m/%d/%Y').strftime('%B %Y')
        
        body = f"""Hi!

Our PG&E bill for {bill_month} is ready. Here's the breakdown:

💰 BILL SUMMARY:
• Total Amount: ${total_amount:.2f}
• Due Date: {bill_info['due_date']}
• Your Share (33.3%): ${roommate_portion:.2f}
• My Share (66.7%): ${float(bill_info['my_portion']):.2f}

📱 VENMO REQUEST:
I'll be sending you a Venmo request for ${roommate_portion:.2f}.

📎 ATTACHMENT:
I've attached a detailed PDF with the full bill breakdown and original PG&E email content for your records.

🏠 SPLIT DETAILS:
As usual, we're splitting the bill with you paying 1/3 and me paying 2/3. The attached PDF shows all the calculations and verification.

⏰ NEXT STEPS:
1. Review the attached PDF
2. Approve the Venmo request when you receive it
3. That's it! I'll handle paying PG&E directly.

Thanks!
Andrew

---
This email was automatically generated by our PG&E Bill Split Automation System.
Generated on {datetime.now().strftime('%B %d, %Y at %I:%M %p')}
"""
        
        return body
    
    def _send_via_mail_app(self, to_email: str, subject: str, body: str, pdf_path: str, from_account: str) -> bool:
        """Send email via Mac's Mail app using AppleScript"""
        try:
            # Verify PDF exists
            if not Path(pdf_path).exists():
                self.logger.error(f"PDF file not found: {pdf_path}")
                return False
            
            # Escape quotes and newlines in content
            clean_subject = subject.replace('"', '\\"').replace('\n', ' ')
            clean_body = body.replace('"', '\\"').replace('\n', '\\n')
            
            # Create AppleScript
            applescript = f'''
tell application "Mail"
    activate
    set newMessage to make new outgoing message with properties {{subject:"{clean_subject}", content:"{clean_body}"}}
    tell newMessage
        make new to recipient with properties {{address:"{to_email}"}}
        make new attachment with properties {{file name:POSIX file "{pdf_path}"}}
    end tell
    send newMessage
end tell
'''
            
            # Execute AppleScript
            result = subprocess.run(
                ['osascript', '-e', applescript],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                self.logger.info(f"Email sent successfully to {to_email}")
                return True
            else:
                self.logger.error(f"AppleScript error: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error("Timeout sending email via Mail app")
            return False
        except Exception as e:
            self.logger.error(f"Error sending email via Mail app: {e}")
            return False
    
    def _simulate_email_send(self, subject: str, body: str, pdf_path: str) -> bool:
        """Simulate email sending in test mode"""
        print("\n" + "="*70)
        print("📧 EMAIL NOTIFICATION (TEST MODE - NOT SENT)")
        print("="*70)
        print(f"To: {settings.ROOMMATE_EMAIL}")
        print(f"From: {settings.MY_EMAIL}")
        print(f"Subject: {subject}")
        print(f"Attachment: {Path(pdf_path).name} ({Path(pdf_path).stat().st_size:,} bytes)")
        print("\nEmail Body:")
        print("-" * 50)
        print(body)
        print("-" * 50)
        print("✓ Email simulation complete (no actual email sent in TEST_MODE)")
        print("="*70)
        
        return True
    
    def send_monthly_summary(self, bills_processed: List[Dict], month_year: str) -> bool:
        """Send monthly summary email
        
        Args:
            bills_processed: List of bills processed this month
            month_year: Month and year string (e.g., "January 2025")
            
        Returns:
            True if email sent successfully
        """
        try:
            subject = f"PG&E Automation Monthly Summary - {month_year}"
            
            total_bills = len(bills_processed)
            total_amount = sum(float(bill['bill_amount']) for bill in bills_processed)
            total_roommate = sum(float(bill['roommate_portion']) for bill in bills_processed)
            total_my_portion = sum(float(bill['my_portion']) for bill in bills_processed)
            
            body = f"""Monthly PG&E Bill Processing Summary for {month_year}

📊 SUMMARY:
• Bills Processed: {total_bills}
• Total Amount: ${total_amount:.2f}
• Roommate's Total: ${total_roommate:.2f}
• Your Total: ${total_my_portion:.2f}

📋 BILL DETAILS:
"""
            
            for i, bill in enumerate(bills_processed, 1):
                body += f"\n{i}. ${float(bill['bill_amount']):.2f} due {bill['due_date']} (Roommate: ${float(bill['roommate_portion']):.2f})"
            
            body += f"""

🤖 AUTOMATION STATUS:
• All bills processed automatically
• PDFs generated and emailed to roommate
• Venmo requests created and ready to send
• Database records maintained for tax purposes

This automated system continues to save time and ensure accurate bill splitting!

---
Generated on {datetime.now().strftime('%B %d, %Y at %I:%M %p')}
"""
            
            if settings.TEST_MODE:
                return self._simulate_email_send(subject, body, "")
            else:
                # Send to yourself as a summary
                return self._send_via_mail_app(
                    to_email=settings.MY_EMAIL,
                    subject=subject,
                    body=body,
                    pdf_path="",  # No attachment for summary
                    from_account=settings.MY_EMAIL
                )
                
        except Exception as e:
            self.logger.error(f"Failed to send monthly summary: {e}")
            return False
    
    def send_error_notification(self, error_details: str) -> bool:
        """Send error notification email to yourself
        
        Args:
            error_details: Description of the error
            
        Returns:
            True if notification sent successfully
        """
        try:
            subject = "PG&E Automation Error Alert"
            
            body = f"""The PG&E Bill Split Automation System encountered an error:

🚨 ERROR DETAILS:
{error_details}

⏰ Time: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}

🔧 RECOMMENDED ACTIONS:
1. Check the application logs for more details
2. Verify Gmail API authentication is still valid
3. Ensure all dependencies are working correctly
4. Run manual tests to identify the issue

📂 LOG LOCATIONS:
• Application logs: logs/app.log
• Error logs: logs/error.log
• Database: data/bills.db

The system will continue attempting to process bills on the next scheduled run.

---
Automated Error Notification System
"""
            
            if settings.TEST_MODE:
                return self._simulate_email_send(subject, body, "")
            else:
                return self._send_via_mail_app(
                    to_email=settings.MY_EMAIL,
                    subject=subject,
                    body=body,
                    pdf_path="",
                    from_account=settings.MY_EMAIL
                )
                
        except Exception as e:
            self.logger.error(f"Failed to send error notification: {e}")
            return False
    
    def test_mail_app_integration(self) -> bool:
        """Test Mac Mail app integration"""
        print("Testing Mac Mail app integration...")
        
        try:
            # Test if Mail app is available
            test_script = '''
tell application "System Events"
    if exists application process "Mail" then
        return "running"
    else
        return "not running"
    end if
end tell
'''
            
            result = subprocess.run(
                ['osascript', '-e', test_script],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                mail_status = result.stdout.strip()
                print(f"✓ Mail app status: {mail_status}")
                
                # Test creating a draft (but not sending)
                if settings.TEST_MODE:
                    print("✓ Mail app integration available")
                    print("✓ Test mode enabled - no actual emails will be sent")
                    return True
                else:
                    # Could test creating a draft in non-test mode
                    print("✓ Mail app integration ready for production")
                    return True
            else:
                print(f"✗ Mail app test failed: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"✗ Mail app integration test error: {e}")
            return False
    
    def test_email_formatting(self) -> bool:
        """Test email content formatting"""
        print("Testing email content formatting...")
        
        # Sample bill data
        sample_bill = {
            'bill_amount': 288.15,
            'due_date': '08/08/2025',
            'roommate_portion': 96.05,
            'my_portion': 192.10
        }
        
        sample_venmo = {
            'venmo_url': 'venmo://paycharge?txn=charge&recipients=UshiLo&amount=96.05',
            'summary': {
                'roommate_owes': 96.05,
                'payment_note': 'PG&E bill split - August 2025'
            }
        }
        
        try:
            # Create a temporary test PDF path (use existing PDF)
            test_pdf_path = list(settings.PDF_DIR.glob('*.pdf'))
            if test_pdf_path:
                test_pdf = str(test_pdf_path[0])
            else:
                test_pdf = str(settings.PDF_DIR / "test.pdf")
                # Create minimal test file
                Path(test_pdf).touch()
            
            # Test main notification
            success = self.send_bill_notification(sample_bill, test_pdf, sample_venmo)
            if success:
                print("✓ Bill notification formatting test passed")
            else:
                print("✗ Bill notification formatting test failed")
                return False
            
            # Test monthly summary
            success = self.send_monthly_summary([sample_bill], "August 2025")
            if success:
                print("✓ Monthly summary formatting test passed")
            else:
                print("✗ Monthly summary formatting test failed")
                return False
            
            # Test error notification
            success = self.send_error_notification("Test error for formatting validation")
            if success:
                print("✓ Error notification formatting test passed")
            else:
                print("✗ Error notification formatting test failed")
                return False
            
            return True
            
        except Exception as e:
            print(f"✗ Email formatting test error: {e}")
            return False